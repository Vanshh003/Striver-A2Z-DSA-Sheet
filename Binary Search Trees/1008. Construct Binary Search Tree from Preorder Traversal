https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/description/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// TC: O(N) (3N)
// SC: O(1) (aux stack space)

class Solution {
public:
    TreeNode* build(vector<int> &preorder, int &i, int upperBound) {
        if(i == preorder.size() || preorder[i] > upperBound) return NULL;
        TreeNode* root = new TreeNode(preorder[i++]);

        root->left = build(preorder, i, root->val);
        root->right = build(preorder, i, upperBound);

        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int i=0;
        return build(preorder, i, INT_MAX);
    }
};
