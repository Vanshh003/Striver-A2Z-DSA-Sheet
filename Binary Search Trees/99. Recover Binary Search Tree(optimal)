https://leetcode.com/problems/recover-binary-search-tree/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
//  TC: O(N) (simple inorder traversal)
//  SC: O(1) (using morris traversal we can remove recursive stack space of O(N))

class Solution {
public:
    TreeNode* first;
    TreeNode* prev;
    TreeNode* middle;
    TreeNode* last;

    void inorder(TreeNode* root) {
        if(root == NULL) return;

        inorder(root->left);

        if(prev != NULL && (root->val < prev->val)) {
            // if this is first violation, mark these 2 nodes as first and middle
            if(first == NULL) {
                first = prev;
                middle = root;
            }
            // if this is second violation, mark this node as last
            else last = root;
        }    

        // mark this node as previous
        prev = root;

        inorder(root->right);
    }

    void recoverTree(TreeNode* root) {
        first = middle = last = NULL;
        prev = new TreeNode(INT_MIN);
        
        inorder(root);

        if(first && last) swap(first->val, last->val);
        else swap(first->val, middle->val);
    }
};
