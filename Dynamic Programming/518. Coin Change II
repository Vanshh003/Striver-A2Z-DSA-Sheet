https://leetcode.com/problems/coin-change-ii/description/




//                  RECURSION
// TC: exponential
// SC: O(amount)

class Solution {
public:
    int solve(int i, int amount, vector<int> &coins) {
        if(i == 0) return (amount % coins[0] == 0);

        int nottake = solve(i-1, amount, coins);
        int take = 0;
        if(coins[i] <= amount) take = solve(i, amount-coins[i], coins);

        return take + nottake;
    }

    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        return solve(n-1, amount, coins);    
    }
};





//                  MEMOIZATION
// TC: O(n * amount)
// SC: O(n * amount) + O(amount)

class Solution {
public:
    int solve(int i, int amount, vector<int> &coins, vector<vector<int>> &dp) {
        if(i == 0) return (amount % coins[0] == 0);
        if(dp[i][amount] != -1) return dp[i][amount];

        int nottake = solve(i-1, amount, coins, dp);
        int take = 0;
        if(coins[i] <= amount) take = solve(i, amount-coins[i], coins, dp);

        return dp[i][amount] = take + nottake;
    }

    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount + 1, -1));

        return solve(n-1, amount, coins, dp);    
    }
};





//                  TABULATION
// TC: O(n * amount)
// SC: O(n * amount) 

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount + 1, 0));

        for(int i=0; i <= amount; i++) {
            // if(i % coins[0] == 0) dp[0][i] = 1;
            dp[0][i] = (i % coins[0] == 0);
        }

        for(int i=1; i<n; i++) {
            for(int amt=0; amt <= amount; amt++) {
                int nottake = dp[i-1][amt];
                int take = 0;
                if(coins[i] <= amt) take = dp[i][amt - coins[i]];

                dp[i][amt] = take + nottake;
            }
        }   

        return dp[n-1][amount];
    }
};





//                  SPACE OPTIMISATION
// TC: O(n * amount)
// SC: O(amount) 

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<int> prev(amount + 1, 0);
        vector<int> curr(amount + 1, 0);

        for(int i=0; i <= amount; i++) {
            // if(i % coins[0] == 0) prev[i] = 1;
            prev[i] = (i % coins[0] == 0);
        }

        for(int i=1; i<n; i++) {
            for(int amt=0; amt <= amount; amt++) {
                int nottake = prev[amt];
                int take = 0;
                if(coins[i] <= amt) take = curr[amt - coins[i]];

                curr[amt] = take + nottake;
            }

            prev = curr;
        }   

        return prev[amount];
    }
};
