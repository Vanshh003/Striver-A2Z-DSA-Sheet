https://www.codingninjas.com/studio/problems/subset-sum-equal-to-k_1550954?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




//              RECURSION
// TC: O(2^n)
// SC: O(n)

#include <bits/stdc++.h> 

bool solve(int index, int target, vector<int> &arr) {
    if(target == 0) return true;
    if(index == 0) return (target == arr[0]);

    bool nottake = solve(index-1, target, arr);
    bool take = false;
    if(target >= arr[index]) take = solve(index-1, target-arr[index], arr);

    return take | nottake;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    return solve(n-1, k, arr);
}





//              MEMOISATION
// TC: O(n * target)
// SC: O(n * target) + O(n)

#include <bits/stdc++.h> 

bool solve(int index, int target, vector<int> &arr, vector<vector<int>> &dp) {
    if(target == 0) return true;
    if(index == 0) return (target == arr[0]);
    if(dp[index][target] != -1) return dp[index][target];

    bool nottake = solve(index-1, target, arr, dp);
    bool take = false;
    if(target >= arr[index]) take = solve(index-1, target-arr[index], arr, dp);

    return dp[index][target] = take | nottake;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>> dp(n, vector<int>(k+1, -1));
    return solve(n-1, k, arr, dp);
}





//              TABULATION
// TC: O(n * target)
// SC: O(n * target)

#include <bits/stdc++.h> 

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>> dp(n, vector<bool>(k+1, 0));
    
    for(int i=0; i<n; i++) dp[i][0] = true;
    dp[0][arr[0]] = true;

    for(int i=1; i<n; i++) {
        for(int target=1; target<=k; target++) {
            bool nottake = dp[i-1][target];
            bool take = false;

            if(target >= arr[i]) take = dp[i-1][target-arr[i]];

            dp[i][target] = take | nottake;
        }
    }

    return dp[n-1][k];
}





//              SPACE OPTIMISATION
// TC: O(n * target)
// SC: O(target)

#include <bits/stdc++.h> 

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<bool> prev(k+1, 0);
    vector<bool> curr(k+1, 0);
    
    prev[0] = curr[0] = true;
    prev[arr[0]] = true;

    for(int i=1; i<n; i++) {
        for(int target=1; target<=k; target++) {
            bool nottake = prev[target];
            bool take = false;

            if(target >= arr[i]) take = prev[target-arr[i]];

            curr[target] = take | nottake;
        }

        prev = curr;
    }

    return prev[k];
}
