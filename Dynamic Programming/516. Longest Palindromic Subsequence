https://leetcode.com/problems/longest-palindromic-subsequence/description/




//                  RECURSION

class Solution {
public:
    int solve(int i, int j, string s1, string s2) {
        if(i == 0 || j == 0) return 0;

        if(s1[i-1] == s2[j-1]) return 1 + solve(i-1, j-1, s1, s2);
        return max(solve(i-1, j, s1, s2), solve(i, j-1, s1, s2));
    }

    int longestPalindromeSubseq(string s1) {
        int n = s1.size();
        
        string s2 = s1;
        reverse(s1.begin(), s1.end());

        return solve(n, n, s1, s2);   
    }
};





//                  MEMOIZATION

class Solution {
public:
    int solve(int i, int j, string s1, string s2, vector<vector<int>> &dp) {
        if(i == 0 || j == 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];

        if(s1[i-1] == s2[j-1]) return dp[i][j] = 1 + solve(i-1, j-1, s1, s2, dp);
        return dp[i][j] = max(solve(i-1, j, s1, s2, dp), solve(i, j-1, s1, s2, dp));
    }

    int longestPalindromeSubseq(string s1) {
        int n = s1.size();
        
        vector<vector<int>> dp(n+1, vector<int>(n+1, -1));

        string s2 = s1;
        reverse(s1.begin(), s1.end());

        return solve(n, n, s1, s2, dp);   
    }
};





//                  TABULATION

class Solution {
public:
    int longestPalindromeSubseq(string s1) {
        int n = s1.size();
        
        string s2 = s1;
        reverse(s1.begin(), s1.end());

        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

        for(int i=0; i<=n; i++) dp[i][0] = 0;
        for(int j=0; j<=n; j++) dp[0][j] = 0;

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=n; j++) {
                if(s1[i-1] == s2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        return dp[n][n];
    }
};





//                  SPACE OPTIMISATION

class Solution {
public:
    int longestPalindromeSubseq(string s1) {
        int n = s1.size();
        
        string s2 = s1;
        reverse(s1.begin(), s1.end());

        vector<int> prev(n+1, 0);
        vector<int> curr(n+1, 0);

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=n; j++) {
                if(s1[i-1] == s2[j-1]) curr[j] = 1 + prev[j-1];
                else curr[j] = max(prev[j], curr[j-1]);
            }

            prev = curr;
        }

        return prev[n];
    }
};
