https://leetcode.com/problems/partition-equal-subset-sum/description/




//              RECURSION
// TC: O(2^n)
// SC: O(n)

class Solution {
public:
    bool solve(int ind, int k, vector<int> &nums) {
        if(k == 0) return true;
        if(ind == 0 ) return (nums[ind] == k);

        bool nottake = solve(ind-1, k, nums);
        bool take = false;
        if(nums[ind] <= k) take = solve(ind-1, k-nums[ind], nums);

        return nottake | take;
    }

    bool canPartition(vector<int> &nums) {
        int n = nums.size();
        
        int sum = 0;
        for(auto i: nums) sum += i;

        if(sum%2 != 0) return false;

        return solve(n-1, sum/2, nums);
    }
};





//              MEMOISATION
// TC: O(n * target)
// SC: O(n * target) + O(n)

class Solution {
public:
    bool solve(int ind, int k, vector<int> &nums, vector<vector<int>> &dp) {
        if(k == 0) return true;
        if(ind == 0 ) return (nums[ind] == k);
        if(dp[ind][k] != -1) return dp[ind][k];

        bool nottake = solve(ind-1, k, nums, dp);
        bool take = false;
        if(nums[ind] <= k) take = solve(ind-1, k-nums[ind], nums, dp);

        return dp[ind][k] = nottake | take;
    }

    bool canPartition(vector<int> &nums) {
        int n = nums.size();
        
        int sum = 0;
        for(auto i: nums) sum += i;

        if(sum%2 != 0) return false;

        vector<vector<int>> dp(n, vector<int>(sum/2+1, -1));
        return solve(n-1, sum/2, nums, dp);
    }
};





//              TABULATION
// TC: O(n * target)
// SC: O(n * target) 

class Solution {
public:
    bool canPartition(vector<int> &nums) {
        int n = nums.size();
        
        int sum = 0;
        for(auto i: nums) sum += i;
        if(sum%2 != 0) return false;

        vector<vector<bool>> dp(n, vector<bool>(sum/2+1, 0));

        for(int i=0; i<n; i++) dp[i][0] = true;
        if(nums[0] <= sum/2) dp[0][nums[0]] = true;

        for(int i=1; i<n; i++) {
            for(int target = 1; target<=sum/2; target++) {
                bool nottake = dp[i-1][target];
                bool take = false;
                if(target >= nums[i]) take = dp[i-1][target-nums[i]];

                dp[i][target] = take | nottake;
            }
        }

        return dp[n-1][sum/2];
    }
};





//              SPACE OPTIMISATION
// TC: O(n * target)
// SC: O(target) 

class Solution {
public:
    bool canPartition(vector<int> &nums) {
        int n = nums.size();
        
        int sum = 0;
        for(auto i: nums) sum += i;
        if(sum%2 != 0) return false;

        vector<bool> prev(sum/2+1, 0);
        vector<bool> curr(sum/2+1, 0);

        prev[0] = curr[0] = true;
        if(nums[0] <= sum/2) prev[nums[0]] = true;

        for(int i=1; i<n; i++) {
            for(int target = 1; target<=sum/2; target++) {
                bool nottake = prev[target];
                bool take = false;
                if(target >= nums[i]) take = prev[target-nums[i]];

                curr[target] = take | nottake;
            }

            prev = curr;
        }

        return prev[sum/2];
    }
};
