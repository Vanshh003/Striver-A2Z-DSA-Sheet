https://leetcode.com/problems/minimum-falling-path-sum/description/





//              RECURSIVE
// TC: O(3^n)
// SC: O(n)

class Solution {
public:
    int solve(int i, int j, vector<vector<int>> &matrix) {
        if(j < 0 || j >= matrix[0].size()) return 1e8;
        if(i == 0) return matrix[0][j];

        int up = matrix[i][j] + solve(i-1, j, matrix);
        int leftDiagonal = matrix[i][j] + solve(i-1, j-1, matrix);
        int rightDiagonal = matrix[i][j] + solve(i-1, j+1, matrix);

        return min(up, min(leftDiagonal, rightDiagonal));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        int mini = 1e8;
        for(int j=0; j<m; j++) mini = min(mini, solve(n-1, j, matrix));
        
        return mini;
    }
};





//              MEMOIZATION
// TC: O(n * m)
// SC: O(n * m) + O(n)

class Solution {
public:
    int solve(int i, int j, vector<vector<int>> &matrix, vector<vector<int>> &dp) {
        if(j < 0 || j >= matrix[0].size()) return 1e8;
        if(i == 0) return matrix[0][j];

        if(dp[i][j] != -1) return dp[i][j];

        int up = matrix[i][j] + solve(i-1, j, matrix, dp);
        int leftDiagonal = matrix[i][j] + solve(i-1, j-1, matrix, dp);
        int rightDiagonal = matrix[i][j] + solve(i-1, j+1, matrix, dp);

        return dp[i][j] = min(up, min(leftDiagonal, rightDiagonal));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<vector<int>> dp(n, vector<int>(m, -1));

        int mini = 1e8;
        for(int j=0; j<m; j++) mini = min(mini, solve(n-1, j, matrix, dp));
        
        return mini;
    }
};





//              TABULATION
// TC: O(n * m)
// SC: O(n * m)

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<vector<int>> dp(n, vector<int>(m, 0));
        for(int j=0; j<m; j++) dp[0][j] = matrix[0][j];

        for(int i=1; i<n; i++) {
            for(int j=0; j<m; j++) {
                int up = matrix[i][j] + dp[i-1][j];
                
                int leftDiagonal = matrix[i][j];
                if(j-1 >= 0) leftDiagonal += dp[i-1][j-1];
                else leftDiagonal += 1e9;

                int rightDiagonal = matrix[i][j];                
                if(j+1 < m) rightDiagonal += dp[i-1][j+1];
                else rightDiagonal += 1e9;

                dp[i][j] = min(up, min(leftDiagonal, rightDiagonal));
            }
        }

        int mini = dp[n-1][0];
        for(int j=1; j<m; j++) mini = min(mini, dp[n-1][j]);
        
        return mini;
    }
};





//              SPACE OPTIMISATION
// TC: O(n * m)
// SC: O(m)

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(); 
        int m = matrix[0].size();

        vector<int> prev(m, 0);
        vector<int> curr(m, 0);

        for(int j=0; j<m; j++) prev[j] = matrix[0][j];

        for(int i=1; i<n; i++) {
            for(int j=0; j<m; j++) {
                int up = matrix[i][j] + prev[j];
                
                int leftDiagonal = matrix[i][j];
                if(j-1 >= 0) leftDiagonal += prev[j-1];
                else leftDiagonal += 1e9;

                int rightDiagonal = matrix[i][j];                
                if(j+1 < m) rightDiagonal += prev[j+1];
                else rightDiagonal += 1e9;

                curr[j] = min(up, min(leftDiagonal, rightDiagonal));
            }

            prev = curr;
        }

        int mini = 1e8;
        for(int j=0; j<m; j++) mini = min(mini, prev[j]);
        
        return mini;
    }
};
