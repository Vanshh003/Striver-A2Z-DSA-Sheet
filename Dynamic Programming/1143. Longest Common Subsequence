https://leetcode.com/problems/longest-common-subsequence/description/




//                      RECURSION
// TC: O(2^n * 2^m) ~  exponential
// SC: O(n + m)     (n and m are lengths of s1 and s2)

class Solution {
public:
    int solve(int i, int j, string &s1, string &s2) {
        if(i < 0 || j < 0) return 0;

        if(s1[i] == s2[j]) return 1 + solve(i-1, j-1, s1, s2);
        return max(solve(i-1, j, s1, s2), solve(i, j-1, s1, s2));
    }

    int longestCommonSubsequence(string s1, string s2) {
        return solve(s1.size()-1, s2.size()-1, s1, s2);
    }
};





//                      MEMOIZATION 1
// TC: O(n * m) 
// SC: O(n * m) + O(n + m)    

class Solution {
public:
    int solve(int i, int j, string &s1, string &s2, vector<vector<int>> &dp) {
        if(i < 0 || j < 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];

        if(s1[i] == s2[j]) return dp[i][j] = 1 + solve(i-1, j-1, s1, s2, dp);
        return dp[i][j] = max(solve(i-1, j, s1, s2, dp), solve(i, j-1, s1, s2, dp));
    }

    int longestCommonSubsequence(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();

        vector<vector<int>> dp(n, vector<int>(m, -1));
        return solve(s1.size()-1, s2.size()-1, s1, s2, dp);
    }
};





//                      MEMOIZATION 2
// TC: O(n * m) 
// SC: O(n * m) + O(n + m)    

class Solution {
public:
    int solve(int i, int j, string &s1, string &s2, vector<vector<int>> &dp) {
        if(i == 0 || j == 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];

        if(s1[i-1] == s2[j-1]) return dp[i][j] = 1 + solve(i-1, j-1, s1, s2, dp);
        return dp[i][j] = max(solve(i-1, j, s1, s2, dp), solve(i, j-1, s1, s2, dp));
    }

    int longestCommonSubsequence(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();

        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return solve(s1.size(), s2.size(), s1, s2, dp);
    }
};





//                      TABULATION
// TC: O(n * m) 
// SC: O(n * m)  

class Solution {
public:
    int longestCommonSubsequence(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();

        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

        for(int i=0; i<n; i++) dp[i][0] = 0;
        for(int j=0; j<m; j++) dp[0][j] = 0;

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(s1[i-1] == s2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        return dp[n][m];
    }
};
