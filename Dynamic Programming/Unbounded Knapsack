https://www.codingninjas.com/studio/problems/unbounded-knapsack_1215029?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




//                  RECURSION
// TC: exponential
// SC: O(w)

int solve(int i, int w, vector<int> &profit, vector<int> &weight) {
    if(i == 0) return (w/weight[0]) * profit[0];
    
    int notpick = solve(i-1, w, profit, weight);
    int pick = 0;
    if(weight[i] <= w) pick = profit[i] + solve(i, w-weight[i], profit, weight);

    return max(pick, notpick);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    return solve(n-1, w, profit, weight);    
}





//                  MEMOIZATION
// TC: O(N * W)
// SC: O(N * W) + O(w)

int solve(int i, int w, vector<int> &profit, vector<int> &weight, vector<vector<int>> &dp) {
    if(i == 0) return (w/weight[0]) * profit[0];
    if(dp[i][w] != -1) return dp[i][w];
    
    int notpick = solve(i-1, w, profit, weight, dp);
    int pick = 0;
    if(weight[i] <= w) pick = profit[i] + solve(i, w-weight[i], profit, weight, dp);

    return dp[i][w] = max(pick, notpick);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight) {
    vector<vector<int>> dp(n, vector<int>(w+1, -1));
    return solve(n-1, w, profit, weight, dp);    
}





//                  TABULATION
// TC: O(N * W)
// SC: O(N * W)

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight) {
    vector<vector<int>> dp(n, vector<int>(w+1, 0));

    for(int i=0; i<=w; i++) dp[0][i] = (i/weight[0]) * profit[0];

    for(int i=1; i<n; i++) {
        for(int j=0; j <= w; j++) {
            int notpick = dp[i-1][j];
            int pick = 0;
            if(weight[i] <= j) pick = profit[i] + dp[i][j-weight[i]];

            dp[i][j] = max(pick, notpick);
        }
    }

    return dp[n-1][w];    
}





//                  SPACE OPTIMISATION
// TC: O(N * W)
// SC: O(W) * 2

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight) {
    vector<int> prev(w+1, 0);
    vector<int> curr(w+1, 0);

    for(int i=0; i<=w; i++) prev[i] = (i/weight[0]) * profit[0];

    for(int i=1; i<n; i++) {
        for(int j=0; j <= w; j++) {
            int notpick = prev[j];
            int pick = 0;
            if(weight[i] <= j) pick = profit[i] + curr[j-weight[i]];

            curr[j] = max(pick, notpick);
        }

        prev = curr;
    }

    return prev[w];    
}





//                  SPACE OPTIMISATION 2
// TC: O(N * W)
// SC: O(W)

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight) {
    vector<int> prev(w+1, 0);

    for(int i=0; i<=w; i++) prev[i] = (i/weight[0]) * profit[0];

    for(int i=1; i<n; i++) {
        for(int j=0; j <= w; j++) {
            int notpick = prev[j];
            int pick = 0;
            if(weight[i] <= j) pick = profit[i] + prev[j-weight[i]];

            prev[j] = max(pick, notpick);
        }
    }

    return prev[w];    
}
