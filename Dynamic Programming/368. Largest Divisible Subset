https://leetcode.com/problems/largest-divisible-subset/description/




// TC: O(NlogN) + O(N) + O(N^2) + O(N) + O(N) + O(N)   ~   O(N^2)
// SC: O(N) + O(N) + O(N)   ~   O(N)

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> temp(n);

        sort(nums.begin(), nums.end());

        for(int i=0; i<n; i++) temp[i] = i;

        for(int i=0; i<n; i++) {
            for(int j=0; j<i; j++) {
                if(nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    temp[i] = j;
                }
            }
        }

        int maxi = 1;
        int lastInd = 0;

        for(int i=0; i<n; i++) {
            if(dp[i] >= maxi) {
                maxi = dp[i];
                lastInd = i;
            }
        }

        vector<int> ans;
        ans.push_back(nums[lastInd]);

        while(temp[lastInd] != lastInd) {
            lastInd = temp[lastInd];
            ans.push_back(nums[lastInd]);
        }

        reverse(ans.begin(), ans.end());
        return ans;
    }
};
