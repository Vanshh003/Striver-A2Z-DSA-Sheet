https://leetcode.com/problems/edit-distance/description/




//                      RECURSION
// TC: exponential  (O(3^n * 3^m)) 
// SC: O(n + m)
            
class Solution {
public:
    int solve(int i, int j, string s1, string s2) {
        if(i < 0) return j+1;
        if(j < 0) return i+1;

        if(s1[i] == s2[j]) return 0 + solve(i-1, j-1, s1, s2);
        
        int insertion = 1 + solve(i, j-1, s1, s2);
        int deletion = 1 + solve(i-1, j, s1, s2);
        int replace = 1 + solve(i-1, j-1, s1, s2);

        return min(insertion, min(deletion, replace));
    }

    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();

        return solve(n-1, m-1, word1, word2);
    }
};





//                      MEMOIZATION 1
// TC: O(n * m) 
// SC: O(n * m) + O(n + m)

class Solution {
public:
    int solve(int i, int j, string s1, string s2, vector<vector<int>> &dp) {
        if(i < 0) return j+1;   // if s1 exhausts
        if(j < 0) return i+1;   // if s2 exhausts

        if(dp[i][j] != -1) return dp[i][j];

        // if element gets matched no operation is to be done
        if(s1[i] == s2[j]) return dp[i][j] = 0 + solve(i-1, j-1, s1, s2, dp);
        
        int insertion = 1 + solve(i, j-1, s1, s2, dp);
        int deletion = 1 + solve(i-1, j, s1, s2, dp);
        int replace = 1 + solve(i-1, j-1, s1, s2, dp);

        return dp[i][j] = min(insertion, min(deletion, replace));
    }

    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();

        vector<vector<int>> dp(n, vector<int>(m, -1));

        return solve(n-1, m-1, word1, word2, dp);
    }
};





//                      MEMOIZATION 2
// TC: O(n * m) 
// SC: O(n * m) + O(n + m)

class Solution {
public:
    int solve(int i, int j, string s1, string s2, vector<vector<int>> &dp) {
        if(i == 0) return j;   // if s1 exhausts
        if(j == 0) return i;   // if s2 exhausts

        if(dp[i][j] != -1) return dp[i][j];

        // if element gets matched no operation is to be done
        if(s1[i-1] == s2[j-1]) return dp[i][j] = 0 + solve(i-1, j-1, s1, s2, dp);
        
        int insertion = 1 + solve(i, j-1, s1, s2, dp);
        int deletion = 1 + solve(i-1, j, s1, s2, dp);
        int replace = 1 + solve(i-1, j-1, s1, s2, dp);

        return dp[i][j] = min(insertion, min(deletion, replace));
    }

    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();

        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));

        return solve(n, m, word1, word2, dp);
    }
};





//                      TABULATION
// TC: O(n * m) 
// SC: O(n * m)

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();

        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));

        for(int i=0; i<=n; i++) dp[i][0] = i;
        for(int j=0; j<=m; j++) dp[0][j] = j;

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(word1[i-1] == word2[j-1]) dp[i][j] = dp[i-1][j-1];
                else {
                    int insertion = 1 + dp[i][j-1];
                    int deletion = 1 + dp[i-1][j];
                    int replace = 1 + dp[i-1][j-1];

                    dp[i][j] = min(insertion, min(deletion, replace));
                }
            }
        }

        return dp[n][m];
    }
};





//                      SPACE OPTIMISATION
// TC: O(n * m) 
// SC: O(m) * 2

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();

        vector<int> prev(m+1, 0);
        vector<int> curr(m+1, 0);

        // for(int i=0; i<=n; i++) dp[i][0] = i;
        for(int j=0; j<=m; j++) prev[j] = j;

        for(int i=1; i<=n; i++) {
            curr[0] = i;

            for(int j=1; j<=m; j++) {
                if(word1[i-1] == word2[j-1]) curr[j] = prev[j-1];
                else {
                    int insertion = 1 + curr[j-1];
                    int deletion = 1 + prev[j];
                    int replace = 1 + prev[j-1];

                    curr[j] = min(insertion, min(deletion, replace));
                }
            }

            prev = curr;
        }

        return prev[m];
    }
};
