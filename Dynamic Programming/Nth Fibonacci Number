https://www.codingninjas.com/studio/problems/nth-fibonacci-number_74156?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




// recursive
// TC: O(2^n)
// SC: O(n)
#include<bits/stdc++.h>
using namespace std;

int solve(int n) {
        if(n <= 1) return n;
        return solve(n-1) + solve(n-2);
}

int main() {
        int n; 
        cin >> n;
        cout << solve(n) << endl;
}





// memoization
// TC: O(n)
// SC: O(n)
#include<bits/stdc++.h>
using namespace std;

int dp[10001];
int solve(int n) {
        if(n <= 1) return n;
        if(dp[n] != -1) return dp[n];

        return dp[n] = solve(n-1) + solve(n-2);
}

int main() {
        memset(dp, -1, sizeof(dp));
        int n; 
        cin >> n;
        cout << solve(n) << endl;
}





// tabulation
// TC: O(n)
// SC: O(n)
#include<bits/stdc++.h>
using namespace std;

int main() {
        int n; 
        cin >> n;

        vector<int> dp(n+1, -1);
        dp[0] = 0;
        dp[1] = 1;

        for(int i=2; i<=n; i++) dp[i] = dp[i-1] + dp[i-2];
        
        cout << dp[n];
}





// space optimised
// TC: O(n)
// SC: O(1)
#include<bits/stdc++.h>
using namespace std;

int main() {
        int n; 
        cin >> n;

        int prev2 = 0;
        int prev = 1;

        for(int i=2; i<=n; i++){
                int cur = prev2+ prev;
                prev2 = prev;
                prev= cur;
        }
        
        cout << prev;
}
