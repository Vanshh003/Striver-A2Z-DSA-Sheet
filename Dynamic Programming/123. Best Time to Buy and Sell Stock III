https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/




//                      RECURSION 1
// TC: exponential
// SC: O(n)

class Solution {
public:
    int solve(int ind, int buy, int cap, int n, vector<int> &prices) {
        if(ind == n) return 0;
        if(cap == 0) return 0;

        int profit = 0;

        if(buy) {
            int take = -prices[ind] + solve(ind+1, 0, cap, n, prices);
            int nottake = 0 + solve(ind+1, 1, cap, n, prices);
            
            profit = max(take, nottake);
        }

        else {
            int sell = prices[ind] + solve(ind+1, 1, cap-1, n, prices);
            int notsell = 0 + solve(ind+1, 0, cap, n, prices);

            profit = max(sell, notsell);
        }

        return profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        return solve(0, 1, 2, n, prices);    
    }
};





//                      MEMOIZATION 1
// TC: O(n * 2 * 3)
// SC: O(n * 2 * 3) + O(n)

class Solution {
public:
    int solve(int ind, int buy, int cap, int n, vector<int> &prices, vector<vector<vector<int>>> &dp) {
        if(ind == n) return 0;
        if(cap == 0) return 0;

        if(dp[ind][buy][cap] != -1) return dp[ind][buy][cap];

        int profit = 0;

        if(buy) {
            int take = -prices[ind] + solve(ind+1, 0, cap, n, prices, dp);
            int nottake = 0 + solve(ind+1, 1, cap, n, prices, dp);
            
            profit = max(take, nottake);
        }

        else {
            int sell = prices[ind] + solve(ind+1, 1, cap-1, n, prices, dp);
            int notsell = 0 + solve(ind+1, 0, cap, n, prices, dp);

            profit = max(sell, notsell);
        }

        return dp[ind][buy][cap] = profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));

        return solve(0, 1, 2, n, prices, dp);    
    }
};





//                      TABULATION 1
// TC: O(n * 2 * 3)
// SC: O(n * 2 * 3)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));

// even if base case is not written it'll work as dp is already 0 initially and in base case we're putting 0

        // if(cap == 0) return 0;
        for(int ind = 0; ind <= n; ind++) {
            for(int buy = 0; buy <= 1; buy++) {
                dp[ind][buy][0] = 0;
            }
        }

        // if(ind == n) return 0;
        for(int buy = 0; buy <= 1; buy++) {
            for(int cap = 0; cap <= 2; cap++) {
                dp[n][buy][cap] = 0;
            }
        }

        
        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                for(int cap = 1; cap <= 2; cap++) {
                    if(buy == 1) {
                        int take = -prices[ind] + dp[ind+1][0][cap];
                        int nottake = 0 + dp[ind+1][1][cap];

                        dp[ind][buy][cap] = max(take, nottake);
                    }

                    else {
                        int sell = prices[ind] + dp[ind+1][1][cap-1];
                        int notsell = 0 + dp[ind+1][0][cap];

                        dp[ind][buy][cap] = max(sell, notsell);
                    }
                }
            }
        }   

        return dp[0][1][2];
    }
};





//                      SPACE OPTIMISATION 1
// TC: O(n * 2 * 3)
// SC: O(2 * 3) * 2

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<int>> after(2, vector<int>(3, 0));
        vector<vector<int>> curr(2, vector<int>(3, 0));

// even if base case is not written it'll work as dp is already 0 initially and in base case we're putting 0

        // if(cap == 0) return 0;
        for(int ind = 0; ind <= n; ind++) {
            for(int buy = 0; buy <= 1; buy++) {
                after[buy][0] = 0;
            }
        }

        // if(ind == n) return 0;
        for(int buy = 0; buy <= 1; buy++) {
            for(int cap = 0; cap <= 2; cap++) {
                after[buy][cap] = 0;
            }
        }

        
        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                for(int cap = 1; cap <= 2; cap++) {
                    if(buy == 1) {
                        int take = -prices[ind] + after[0][cap];
                        int nottake = 0 + after[1][cap];

                        curr[buy][cap] = max(take, nottake);
                    }

                    else {
                        int sell = prices[ind] + after[1][cap-1];
                        int notsell = 0 + after[0][cap];

                        curr[buy][cap] = max(sell, notsell);
                    }
                }
            }

            after = curr;
        }   

        return after[1][2];
    }
};









//                      RECURSION 2
// TC: exponential
// SC: O(n)

class Solution {
public:
    int solve(int ind, int trans, int n, vector<int> &prices) {
        if(ind == n || trans == 4) return 0;

        int profit = 0;

        // buy
        if(trans % 2 == 0) {
            int take = -prices[ind] + solve(ind+1, trans+1, n, prices);
            int nottake = 0 + solve(ind+1, trans, n, prices);

            profit = max(take, nottake);
        }

        // sell
        else {
            int sell = prices[ind] + solve(ind+1, trans+1, n, prices);
            int notsell = 0 + solve(ind+1, trans, n, prices);

            profit = max(sell, notsell);
        }

        return profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        return solve(0, 0, n, prices);
    }
};





//                      MEMOIZATION 2
// TC: O(n * 4)
// SC: O(n * 4) + O(n)

class Solution {
public:
    int solve(int ind, int trans, int n, vector<int> &prices, vector<vector<int>> &dp) {
        if(ind == n || trans == 4) return 0;

        if(dp[ind][trans] != -1) return dp[ind][trans];

        int profit = 0;

        // buy
        if(trans % 2 == 0) {
            int take = -prices[ind] + solve(ind+1, trans+1, n, prices, dp);
            int nottake = 0 + solve(ind+1, trans, n, prices, dp);

            profit = max(take, nottake);
        }

        // sell
        else {
            int sell = prices[ind] + solve(ind+1, trans+1, n, prices, dp);
            int notsell = 0 + solve(ind+1, trans, n, prices, dp);

            profit = max(sell, notsell);
        }

        return dp[ind][trans] = profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<int>> dp(n, vector<int>(4, -1));

        return solve(0, 0, n, prices, dp);
    }
};





//                      TABULATION 2
// TC: O(n * 4)
// SC: O(n * 4)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<int>> dp(n+1, vector<int>(4+1, 0));

        // // not required as we are already initializing all with 0 in declaration of dp[n+1][5]
        // for(int trans = 0; trans <= 4; trans++) dp[n][trans] = 0;
        // for(int ind = 0; ind <= n; ind++) dp[ind][4] = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            for(int trans = 3; trans >= 0; trans--) {
                // buy
                if(trans % 2 == 0) {
                    int take = -prices[ind] + dp[ind+1][trans+1];
                    int nottake = 0 + dp[ind+1][trans];

                    dp[ind][trans] = max(take, nottake);
                }

                // sell
                else {
                    int sell = prices[ind] + dp[ind+1][trans+1];
                    int notsell = 0 + dp[ind+1][trans];

                    dp[ind][trans] = max(sell, notsell);
                }
            }
        }

        return dp[0][0];
    }
};





//                      SPACE OPTIMISATION 2
// TC: O(n * 4)
// SC: O(5) * 2  ~  O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<int> ahead(4+1, 0);
        vector<int> curr(4+1, 0);

        // // not required as we are already initializing all with 0 in declaration of dp[n+1][5]
        // for(int trans = 0; trans <= 4; trans++) dp[n][trans] = 0;
        // for(int ind = 0; ind <= n; ind++) dp[ind][4] = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            for(int trans = 3; trans >= 0; trans--) {
                // buy
                if(trans % 2 == 0) {
                    int take = -prices[ind] + ahead[trans+1];
                    int nottake = 0 + ahead[trans];

                    curr[trans] = max(take, nottake);
                }

                // sell
                else {
                    int sell = prices[ind] + ahead[trans+1];
                    int notsell = 0 + ahead[trans];

                    curr[trans] = max(sell, notsell);
                }
            }

            ahead = curr;
        }

        return ahead[0];
    }
};
