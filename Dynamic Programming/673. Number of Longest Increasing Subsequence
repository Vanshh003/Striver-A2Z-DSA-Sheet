https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/




// TC: O(n^2) + O(n)
// SC: O(n) + O(n)

class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> count(n, 1);

        int maxi = 0; 

        for(int i=0; i<n; i++) {
            for(int j=0; j<i; j++) {
                if(nums[j] < nums[i] && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    count[i] = count[j];
                }
                else if(nums[j] < nums[i] && dp[i] == dp[j] + 1) count[i] += count[j];
            }

            maxi = max(maxi, dp[i]);
        }

        int cnt = 0;
        for(int i=0; i<n; i++) {
            if(dp[i] == maxi) cnt += count[i];
        }

        return cnt;
    }
};
