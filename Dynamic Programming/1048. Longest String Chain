https://leetcode.com/problems/longest-string-chain/




// TC: O(NlogN) + O(N^2) * O(len)  (length of string)
// SC: O(N)

class Solution {
public:
    bool compare(string &s1, string &s2) {
        if(s1.size()+1 != s2.size()) return false;

        int first = 0;
        int second = 0;

        while(first < s2.size()) {
            if(s2[first] == s1[second]) {
                first++;
                second++;
            }
            else first++;
        }

        if(first == s2.size() && second == s1.size()) return true;
        return false;
    }

    static bool comp(string &s1, string &s2) {
        return s1.size() < s2.size();
    }

    int longestStrChain(vector<string>& words) {
        int n = words.size();
        vector<int> dp(n, 1);

        sort(words.begin(), words.end(), comp);

        int maxi = 1;

        for(int i=1; i<n; i++) {
            for(int j=0; j<i; j++) {
                if(compare(words[j], words[i]) && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                }

                maxi = max(maxi, dp[i]);
            }
        }

        return maxi;
    }
};
