https://leetcode.com/problems/longest-increasing-subsequence/description/




//                      RECURSION
// TC: O(2^n)  ~  exponential
// SC: O(n)

class Solution {
public:
    int solve(int ind, int prev, int n, vector<int> &nums) {
        if(ind == n) return 0;

        int nottake = 0 + solve(ind+1, prev, n, nums);
        
        int take = 0;
        if(prev == -1 || nums[ind] > nums[prev]) take = 1 + solve(ind+1, ind, n, nums);

        return max(take, nottake);
    }

    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        return solve(0, -1, n, nums);    
    }
};





//                      MEMOIZATION
// TC: O(n * n) 
// SC: O(n * n) + O(n)

class Solution {
public:
    int solve(int ind, int prev, int n, vector<int> &nums, vector<vector<int>> &dp) {
        if(ind == n) return 0;
        if(dp[ind][prev+1] != -1) return dp[ind][prev+1];

        int nottake = 0 + solve(ind+1, prev, n, nums, dp);
        
        int take = 0;
        if(prev == -1 || nums[ind] > nums[prev]) take = 1 + solve(ind+1, ind, n, nums, dp);

        return dp[ind][prev+1] = max(take, nottake);
    }

    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<vector<int>> dp(n, vector<int>(n+1, -1));

        return solve(0, -1, n, nums, dp);    
    }
};





//                      TABULATION
// TC: O(n * n) 
// SC: O(n * n)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

        // base case
        // no need to write base case as we're already initialising dp with 0
        // for(int prev = -1+1; prev <= n; prev++) dp[n][prev] = 0; 

        for(int ind = n-1; ind >= 0; ind--) {
            for(int prev = ind-1; prev >= -1; prev--) {
                int nottake = 0 + dp[ind+1][prev+1];
                
                int take = 0;
                if(prev == -1 || nums[ind] > nums[prev]) take = 1 + dp[ind+1][ind+1];

                dp[ind][prev+1] = max(take, nottake);
            }
        }  

        return dp[0][-1+1];
    }
};





//                      SPACE OPTIMISATION
// TC: O(n * n) 
// SC: O(n) * 2

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<int> ahead(n+1, 0);
        vector<int> curr(n+1, 0);

        // base case
        // no need to write base case as we're already initialising dp with 0
        // for(int prev = -1+1; prev <= n; prev++) dp[n][prev] = 0; 

        for(int ind = n-1; ind >= 0; ind--) {
            for(int prev = ind-1; prev >= -1; prev--) {
                int nottake = 0 + ahead[prev+1];
                
                int take = 0;
                if(prev == -1 || nums[ind] > nums[prev]) take = 1 + ahead[ind+1];

                curr[prev+1] = max(take, nottake);
            }

            ahead = curr;
        }  

        return ahead[-1+1];
    }
};










//                      TABULATION 2
// TC: O(n * n)  + O(n)
// SC: O(n) 

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<int> dp(n, 1);

        for(int ind = 0; ind < n; ind++) {
            for(int prev = 0; prev < ind; prev++) {
                if(nums[prev] < nums[ind]) dp[ind] = max(1 + dp[prev], dp[ind]);
            }
        }

        int maxi = 0;
        for(int i: dp) maxi = max(maxi, i);

        return maxi;
    }
};










//                      BINARY SEARCH
// TC: O(N * logN)
// SC: O(N) 

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> temp;
        temp.push_back(nums[0]);

        int len = 1;

        for(int i=1; i<nums.size(); i++) {
            if(nums[i] > temp.back()) {
                temp.push_back(nums[i]);
                len++;
            }
            else {
                int index = lower_bound(temp.begin(), temp.end(), nums[i]) - temp.begin();
                temp[index] = nums[i];
            }
        }

        // return temp.size();
        return len;
    }
};
