https://www.codingninjas.com/studio/problems/matrix-chain-multiplication_624880?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




//                      RECURSION
// TC: exponential
// SC: O(n)

int solve(int i, int j, int* v) {
    if(i == j) return 0;

    int mini = 1e9;

    for(int k=i; k<j; k++) {
        int operations = (v[i-1] * v[k] * v[j]) + solve(i, k, v) + solve(k+1, j, v);
        mini = min(mini, operations);
    }

    return mini;
}

int matrixChainMultiplication(int* arr, int n) {
    int size = n+1;
    return solve(1, size-1, arr);    
}





//                      MEMOIZATION
// TC: O(n * n) * n
// SC: O(n * n) + O(n)

#include <bits/stdc++.h>
int solve(int i, int j, int* v, vector<vector<int>> &dp) {
    if(i == j) return 0;
    if(dp[i][j] != -1) return dp[i][j];

    int mini = 1e9;

    for(int k=i; k<j; k++) {
        int operations = (v[i-1] * v[k] * v[j]) + solve(i, k, v, dp) + solve(k+1, j, v, dp);
        mini = min(mini, operations);
    }

    return dp[i][j] = mini;
}

int matrixChainMultiplication(int* arr, int n) {
    int size = n+1;
    vector<vector<int>> dp(size, vector<int>(size, -1));
    return solve(1, n, arr, dp);    
}





//                      TABULATION
// TC: O(n * n) * n
// SC: O(n * n)

#include <bits/stdc++.h>
int matrixChainMultiplication(int* arr, int n) {
    int size = n+1;
    vector<vector<int>> dp(size, vector<int>(size, 0));

    for(int i=0; i<size; i++) dp[i][i] = 0;

    for(int i=size-1; i>=1; i--) {
        for(int j=i+1; j<size; j++) {
            int mini = 1e9;

            for(int k=i; k<j; k++) {
                int operations = (arr[i-1] * arr[k] * arr[j]) + dp[i][k] + dp[k+1][j];
                mini = min(mini, operations);
            }

            dp[i][j] = mini;
        }
    }  

    return dp[1][n];
}
