https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/




//                      RECURSION
// TC: 2^n
// SC: O(n)

class Solution {
public:
    int solve(int ind, int buy, int n, vector<int> &prices) {
        if(ind == n) return 0;


        int profit = 0;

        if(buy) {
            int take = -prices[ind] + solve(ind+1, 0, n, prices);
            int nottake = 0 + solve(ind+1, 1, n, prices);
            profit = max(take, nottake);
        }

        else {
            int sell = prices[ind] + solve(ind+1, 1, n, prices);
            int notsell = 0 + solve(ind+1, 0, n, prices);
            profit = max(sell, notsell);
        }

        return profit;
    }

    int maxProfit(vector<int> &prices) {
        int n = prices.size();

        return solve(0, 1, n, prices);
    }
};





//                      MEMOIZATION
// TC: O(n * 2)
// SC: O(n * 2) + O(n)

class Solution {
public:
    int solve(int ind, int buy, int n, vector<int> &prices, vector<vector<int>> &dp) {
        if(ind == n) return 0;
        if(dp[ind][buy] != -1) return dp[ind][buy];


        int profit = 0;

        if(buy) {
            int take = -prices[ind] + solve(ind+1, 0, n, prices, dp);
            int nottake = 0 + solve(ind+1, 1, n, prices, dp);
            profit = max(take, nottake);
        }

        else {
            int sell = prices[ind] + solve(ind+1, 1, n, prices, dp);
            int notsell = 0 + solve(ind+1, 0, n, prices, dp);
            profit = max(sell, notsell);
        }

        return dp[ind][buy] = profit;
    }

    int maxProfit(vector<int> &prices) {
        int n = prices.size();

        vector<vector<int>> dp(n, vector<int>(2, -1));
        return solve(0, 1, n, prices, dp);
    }
};





//                      TABULATION
// TC: O(n * 2)
// SC: O(n * 2)

class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size();

        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        
        dp[n][0] = dp[n][1] = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                int profit = 0;

                if(buy) {
                    int take = -prices[ind] + dp[ind+1][0];
                    int nottake = 0 + dp[ind+1][1];

                    profit = max(take, nottake);
                }

                else {
                    int sell = prices[ind] + dp[ind+1][1];
                    int notsell = 0 + dp[ind+1][0];

                    profit = max(sell, notsell);
                }

                dp[ind][buy] = profit;
            }
        }

        return dp[0][1];
    }
};





//                      SPACE OPTIMISATION 1
// TC: O(n * 2)
// SC: O(2) * 2  ~  O(1)

class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size();

        vector<int> ahead(2, 0);
        vector<int> curr(2, 0);
        
        ahead[0] = ahead[1] = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                int profit = 0;

                if(buy) {
                    int take = -prices[ind] + ahead[0];
                    int nottake = 0 + ahead[1];

                    profit = max(take, nottake);
                }

                else {
                    int sell = prices[ind] + ahead[1];
                    int notsell = 0 + ahead[0];

                    profit = max(sell, notsell);
                }

                curr[buy] = profit;
            }

            ahead = curr;
        }

        return ahead[1];
    }
};





//                      SPACE OPTIMISATION 2
// TC: O(n * 2)
// SC: O(1)  (4 variables)


// ahead[0] = aheadNotBuy
// ahead[1] = aheadBuy
// curr[0] = currNotBuy
// curr[1] = currBuy 


class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size();

        // vector<int> ahead(2, 0);
        // vector<int> curr(2, 0);
        int aheadNotBuy, aheadBuy;
        int currNotBuy, currBuy;
        
        // ahead[0] = ahead[1] = 0;
        aheadNotBuy = aheadBuy = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            // for(int buy = 0; buy <= 1; buy++) {
            //     int profit = 0;

            //     if(buy) {
            //         int take = -prices[ind] + ahead[0];
            //         int nottake = 0 + ahead[1];

            //         profit = max(take, nottake);
            //     }

            //     else {
            //         int sell = prices[ind] + ahead[1];
            //         int notsell = 0 + ahead[0];

            //         profit = max(sell, notsell);
            //     }

            //     curr[buy] = profit;
            // }
            int sell = prices[ind] + aheadBuy;
            int notsell = 0 + aheadNotBuy;

            currNotBuy = max(sell, notsell);


            int take = -prices[ind] + aheadNotBuy;
            int nottake = 0 + aheadBuy;

            currBuy = max(take, nottake);


            // ahead = curr;
            aheadBuy = currBuy;
            aheadNotBuy = currNotBuy;
        }

        // return ahead[1];
        return aheadBuy;
    }
};
