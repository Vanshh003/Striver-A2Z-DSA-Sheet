https://www.codingninjas.com/studio/problems/count-subsets-with-sum-k_3952532?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




//				RECURSION
// TC: O(2^n)
// sC: O(n)		(aux stack space)

int solve(int index, int target, vector<int> &arr) {
	if(target == 0) return 1;
	if(index == 0) return (arr[index] == target);

	int notpick = solve(index-1, target, arr);
	int pick = 0;
	if(target >= arr[index]) pick = solve(index-1, target-arr[index], arr);

	return (pick + notpick);
}

int findWays(vector<int>& arr, int k) {
	int n = arr.size();
	return solve(n-1, k, arr);	
}





//				MEMOISATION
// TC: O(n * target)
// sC: O(n * target) + O(n)		

int solve(int index, int target, vector<int> &arr, vector<vector<int>> &dp) {
	if(target == 0) return 1;
	if(index == 0) return (arr[index] == target);
	if(dp[index][target] != -1) return dp[index][target];

	int notpick = solve(index-1, target, arr, dp);
	int pick = 0;
	if(target >= arr[index]) pick = solve(index-1, target-arr[index], arr, dp);

	return dp[index][target] = pick + notpick;
}

int findWays(vector<int>& arr, int k) {
	int n = arr.size();
	vector<vector<int>> dp(n, vector<int>(k+1, -1));

	return solve(arr.size()-1, k, arr, dp);	
}





//				TABULATION
// TC: O(n * target)
// sC: O(n * target) 	
int findWays(vector<int>& arr, int k) {
	int n = arr.size();
	vector<vector<int>> dp(n, vector<int>(k+1, 0));

	if(arr[0] <= k) dp[0][arr[0]] = 1;
	for(int i=0; i<n; i++) dp[i][0] = 1;

	for(int i=1; i<n; i++) {
		for(int target = 0; target <= k; target++) {
			int notpick = dp[i-1][target];
			int pick = 0;
			if(target >= arr[i]) pick = dp[i-1][target-arr[i]];

			dp[i][target] = pick + notpick;
		}
	}

	return dp[n-1][k];	
}





//				SPACE OPTIMISATION
// TC: O(n * target)
// sC: O(target) 	
int findWays(vector<int>& arr, int k) {
	int n = arr.size();
	vector<int> prev(k+1, 0);
	vector<int> curr(k+1, 0);

	if(arr[0] <= k) prev[arr[0]] = 1;
	prev[0] = curr[0] = 1;

	for(int i=1; i<n; i++) {
		for(int target = 0; target <= k; target++) {
			int notpick = prev[target];
			int pick = 0;
			if(target >= arr[i]) pick = prev[target-arr[i]];

			curr[target] = pick + notpick;
		}

		prev = curr;
	}

	return prev[k];	
}
