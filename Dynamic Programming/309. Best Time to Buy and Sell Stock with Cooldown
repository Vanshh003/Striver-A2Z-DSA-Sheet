https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/




//                          RECURSION
// TC: O(2^n)  ~  exponential
// SC: O(n)

class Solution {
public:
    int solve(int ind, int buy, int n, vector<int> &prices) {
        if(ind >= n) return 0;

        int profit = 0;

        if(buy == 1) {
            int take = -prices[ind] + solve(ind+1, 0, n, prices);
            int nottake = 0 + solve(ind+1, 1, n, prices);

            profit = max(take, nottake);
        }

        else {
            int sell = prices[ind] + solve(ind+2, 1, n, prices);
            int notsell = 0 + solve(ind+1, 0, n, prices);

            profit = max(sell, notsell);
        }

        return profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        return solve(0, 1, n, prices);
    }
};





//                          MEMOIZATION
// TC: O(n * 2)
// SC: O(n * 2) + O(n)

class Solution {
public:
    int solve(int ind, int buy, int n, vector<int> &prices, vector<vector<int>> &dp) {
        if(ind >= n) return 0;

        if(dp[ind][buy] != -1) return dp[ind][buy];

        int profit = 0;

        if(buy == 1) {
            int take = -prices[ind] + solve(ind+1, 0, n, prices, dp);
            int nottake = 0 + solve(ind+1, 1, n, prices, dp);

            profit = max(take, nottake);
        }

        else {
            int sell = prices[ind] + solve(ind+2, 1, n, prices, dp);
            int notsell = 0 + solve(ind+1, 0, n, prices, dp);

            profit = max(sell, notsell);
        }

        return dp[ind][buy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<int>> dp(n, vector<int>(2, -1));

        return solve(0, 1, n, prices, dp);
    }
};





//                          TABULATION
// TC: O(n * 2)
// SC: O(n * 2)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<int>> dp(n+2, vector<int>(2, 0));

        // base case
        // no need to write this as dp is initialised with 0 itself
        
        // for(int buy = 0; buy <= 1; buy++) dp[n][buy] = dp[n+1][buy] = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                if(buy == 1) {
                    int take = -prices[ind] + dp[ind+1][0];
                    int nottake = 0 + dp[ind+1][1];

                    dp[ind][1] = max(take, nottake);
                }

                else {
                    int sell = prices[ind] + dp[ind+2][1];
                    int notsell = 0 + dp[ind+1][0];

                    dp[ind][0] = max(sell, notsell);
                }
            }
        }

        return dp[0][1];        
    }
};





//                          TABULATION 2
// TC: O(n)
// SC: O(n * 2)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<vector<int>> dp(n+2, vector<int>(2, 0));

        // base case
        // no need to write this as dp is initialised with 0 itself

        // for(int buy = 0; buy <= 1; buy++) dp[n][buy] = dp[n+1][buy] = 0;


        for(int ind = n-1; ind >= 0; ind--) {

            // for(int buy = 0; buy <= 1; buy++) {

                // if(buy == 1) {
                //     int take = -prices[ind] + dp[ind+1][0];
                //     int nottake = 0 + dp[ind+1][1];

                //     dp[ind][1] = max(take, nottake);
                // }

                dp[ind][1] = max(-prices[ind] + dp[ind+1][0], 0 + dp[ind+1][1]);


                // else {
                //     int sell = prices[ind] + dp[ind+2][1];
                //     int notsell = 0 + dp[ind+1][0];

                //     dp[ind][0] = max(sell, notsell);
                // }

                dp[ind][0] = max(prices[ind] + dp[ind+2][1], 0 + dp[ind+1][0]);

            // }
            
        }

        return dp[0][1];        
    }
};





//                          SPACE OPTIMISATION 
// TC: O(n * 2)
// SC: O(2) * 3  ~  O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        vector<int> front2(2, 0);
        vector<int> front1(2, 0);
        vector<int> curr(2, 0);

        // base case
        // no need to write this as dp is initialised with 0 itself
        
        // for(int buy = 0; buy <= 1; buy++) dp[n][buy] = dp[n+1][buy] = 0;

        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                if(buy == 1) {
                    int take = -prices[ind] + front1[0];
                    int nottake = 0 + front1[1];

                    curr[1] = max(take, nottake);
                }

                else {
                    int sell = prices[ind] + front2[1];
                    int notsell = 0 + front1[0];

                    curr[0] = max(sell, notsell);
                }
            }

            front2 = front1;
            front1 = curr;
        }

        return curr[1];        
    }
};
