https://www.codingninjas.com/studio/problems/rod-cutting-problem_800284?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




//					RECURSION
// TC: exponential
// SC: O(n) or O(target)

int solve(int i, int n, vector<int> &price) {
	if(i == 0) return n * price[0];

	int nottake = solve(i-1, n, price);
	int take = INT_MIN;
	int rodlength = i+1;
	if(rodlength <= n) take = price[i] + solve(i, n-rodlength, price);

	return max(take, nottake);
}

int cutRod(vector<int> &price, int n) {
	return solve(n-1, n, price);
}





//					MEMOIZATION
// TC: O(n * n)
// SC: O(n * n) + O(n)

int solve(int i, int n, vector<int> &price, vector<vector<int>> &dp) {
	if(i == 0) return n * price[0];
	if(dp[i][n] != -1) return dp[i][n];

	int nottake = solve(i-1, n, price, dp);
	int take = INT_MIN;
	int rodlength = i+1;
	if(rodlength <= n) take = price[i] + solve(i, n-rodlength, price, dp);

	return dp[i][n] = max(take, nottake);
}

int cutRod(vector<int> &price, int n) {
	vector<vector<int>> dp(n, vector<int>(n+1, -1));
	return solve(n-1, n, price, dp);
}





//					TABULATION
// TC: O(n * n)
// SC: O(n * n)

int cutRod(vector<int> &price, int N) {
	vector<vector<int>> dp(N, vector<int>(N+1, 0));
    for(int i=0; i <= N; i++) dp[0][i] = i * price[0];
 
    for(int ind = 1; ind < N; ind++) {
        for(int j=0; j <= N; j++) {
            int notTake = dp[ind-1][j];
            int take = INT_MIN;
            int rodLength = ind+1;
            if(rodLength <= j) take = price[ind] + dp[ind][j-rodLength];
            
            dp[ind][j] = max(take, notTake);   
        }
    }

    return dp[N-1][N];
}





//					SPACE OPTIMISATION
// TC: O(n * n)
// SC: O(n) * 2

int cutRod(vector<int> &price, int N) {
	vector<int> prev(N+1, 0);
    vector<int> curr(N+1, 0); 

    for(int i=0; i <= N; i++) prev[i] = i * price[0];
 
    for(int ind = 1; ind < N; ind++) {
        for(int j=0; j <= N; j++) {
            int notTake = prev[j];
            int take = INT_MIN;
            int rodLength = ind+1;
            if(rodLength <= j) take = price[ind] + curr[j-rodLength];
            
            curr[j] = max(take, notTake);   
        }

        prev = curr;
    }

    return prev[N];
}





//					SPACE OPTIMISATION 2
// TC: O(n * n)
// SC: O(n)

int cutRod(vector<int> &price, int N) {
	vector<int> prev(N+1, 0);

    for(int i=0; i <= N; i++) prev[i] = i * price[0];
 
    for(int ind = 1; ind < N; ind++) {
        for(int j=0; j <= N; j++) {
            int notTake = prev[j];
            int take = INT_MIN;
            int rodLength = ind+1;
            if(rodLength <= j) take = price[ind] + prev[j-rodLength];
            
            prev[j] = max(take, notTake);   
        }

    }

    return prev[N];
}
