https://leetcode.com/problems/wildcard-matching/description/




//                  RECURSION
// TC: exponential
// SC: O(n + m)

class Solution {
public:
    bool solve(int i, int j, string &p, string &s) {
        if(i < 0 && j < 0) return true;             // both strings get exhausted
        if(i < 0 && j >= 0) return false;           // s1 gets exhausted but s2 is remaining
        if(j < 0 && i >= 0) {                       // s2 gets exhausted but s1 is remaining.. this will be true only when all the characters in s1 are only '*'   
            for(int ii = 0; ii <= i; ii++) if(p[ii] != '*') return false;
            return true;
        }
        // if(i >= 0 && j < 0) return (count(p.begin(), p.begin()+i+1, '*') == p.size());     



        if(p[i] == s[j] || p[i] == '?') return solve(i-1, j-1, p, s);      // matching
        
        if(p[i] == '*') {      
            bool notconsider = solve(i-1, j, p, s);
            bool consider = solve(i, j-1, p, s);
            
            return consider || notconsider;
        }

        return false;       // not matching
    }

    bool isMatch(string s, string p) {
        int n = p.size();
        int m = s.size();

        return solve(n-1, m-1, p, s);
    }
};





//                  MEMOIZATION 1
// TC: o(n * m)
// SC: o(n * m) + O(n + m)

class Solution {
public:
    bool solve(int i, int j, string &p, string &s, vector<vector<int>> &dp) {
        if(i < 0 && j < 0) return true;             // both strings get exhausted
        if(i < 0 && j >= 0) return false;           // s1 gets exhausted but s2 is remaining
        if(j < 0 && i >= 0) {                       // s2 gets exhausted but s1 is remaining.. this will be true only when all the characters in s1 are only '*'   
            for(int ii = 0; ii <= i; ii++) if(p[ii] != '*') return false;
            return true;
        }
        // if(i >= 0 && j < 0) return (count(p.begin(), p.begin()+i+1, '*') == p.size());     

        if(dp[i][j] != -1) return dp[i][j];


        if(p[i] == s[j] || p[i] == '?') return dp[i][j] = solve(i-1, j-1, p, s, dp);      // matching
        
        if(p[i] == '*') {      
            bool notconsider = solve(i-1, j, p, s, dp);
            bool consider = solve(i, j-1, p, s, dp);
            
            return dp[i][j] = consider || notconsider;
        }

        return dp[i][j] = false;       // not matching
    }

    bool isMatch(string s, string p) {
        int n = p.size();
        int m = s.size();

        vector<vector<int>> dp(n, vector<int>(m, -1));

        return solve(n-1, m-1, p, s, dp);
    }
};





//                  MEMOIZATION 2
// TC: o(n * m)
// SC: o(n * m) + O(n + m)

class Solution {
public:
    bool solve(int i, int j, string &p, string &s, vector<vector<int>> &dp) {
        if(i == 0 && j == 0) return true;             // both strings get exhausted
        if(i == 0 && j > 0) return false;           // s1 gets exhausted but s2 is remaining
        if(j == 0 && i > 0) {                       // s2 gets exhausted but s1 is remaining.. this will be true only when all the characters in s1 are only '*'   
            for(int ii = 1; ii <= i; ii++) if(p[ii-1] != '*') return false;
            return true;
        }
        // if(i > 0 && j == 0) return (count(p.begin(), p.begin()+i+1, '*') == p.size());     

        if(dp[i][j] != -1) return dp[i][j];


        if(p[i-1] == s[j-1] || p[i-1] == '?') return dp[i][j] = solve(i-1, j-1, p, s, dp);      // matching
        
        if(p[i-1] == '*') {      
            bool notconsider = solve(i-1, j, p, s, dp);
            bool consider = solve(i, j-1, p, s, dp);
            
            return dp[i][j] = consider || notconsider;
        }

        return dp[i][j] = false;       // not matching
    }

    bool isMatch(string s, string p) {
        int n = p.size();
        int m = s.size();

        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));

        return solve(n, m, p, s, dp);
    }
};





//                  TABULATION
// TC: o(n * m)
// SC: o(n * m)

class Solution {
public:
    bool isMatch(string s, string p) {
        int n = p.size();
        int m = s.size();

        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));

        dp[0][0] = true;
        for(int j = 1; j <= m; j++) dp[0][j] = false;
        for(int i = 1; i <= n; i++) {
            bool flag = true;
            
            for(int ii = 1; ii <= i; ii++) {
                if(p[ii-1] != '*') {
                    flag = false;
                    break;
                }
            } 

            dp[i][0] = flag;
        }


        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(p[i-1] == s[j-1] || p[i-1] == '?') dp[i][j] = dp[i-1][j-1];
                
                else if(p[i-1] == '*') {
                    bool notconsider = dp[i-1][j];
                    bool consider = dp[i][j-1];

                    dp[i][j] = consider || notconsider;
                }
                
                else dp[i][j] = false;
            }
        }

        return dp[n][m];
    }
};





//                  SPACE OPTIMISATION
// TC: o(n * m)
// SC: o(m) * 2

class Solution {
public:
    bool isMatch(string s, string p) {
        int n = p.size();
        int m = s.size();

        vector<bool> prev(m+1, false);
        vector<bool> curr(m+1, false);

        prev[0] = true;
        for(int j = 1; j <= m; j++) prev[j] = false;
        // for(int i = 1; i <= n; i++) {
        //     bool flag = true;
            
        //     for(int ii = 1; ii <= i; ii++) {
        //         if(p[ii-1] != '*') {
        //             flag = false;
        //             break;
        //         }
        //     } 
            
        //     // for every row 0th column's value is assigned
        //     dp[i][0] = flag;
        // }


        for(int i = 1; i <= n; i++) {
            // curr is the current column and curr's 0th row has to be assigned
            bool flag = true;
            
            for(int ii = 1; ii <= i; ii++) {
                if(p[ii-1] != '*') {
                    flag = false;
                    break;
                }
            } 

            curr[0] = flag;


            for(int j = 1; j <= m; j++) {
                if(p[i-1] == s[j-1] || p[i-1] == '?') curr[j] = prev[j-1];
                
                else if(p[i-1] == '*') {
                    bool notconsider = prev[j];
                    bool consider = curr[j-1];

                    curr[j] = consider || notconsider;
                }
                
                else curr[j] = false;
            }

            prev = curr;
        }

        return prev[m];
    }
};
