https://leetcode.com/problems/unique-paths-ii/




//              RECURSION
// TC: O(2 ^ (m*n))
// SC: O((m-1) + (n-1))     O(path length)
class Solution {
public:
    int solve(int i, int j, vector<vector<int>> &grid) {
        if(i == 0 && j == 0 && grid[i][j] == 0) return 1;
        if(i < 0 || j < 0) return 0;
        if(i >= 0 && j >=0 && grid[i][j] == 1) return 0;

        int up = solve(i-1, j, grid);
        int left = solve(i, j-1, grid);

        return up + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();

        return solve(n-1, m-1, obstacleGrid);    
    }
};





//              MEMOIZATION
// TC: O(n * m)
// SC: O((m-1) + (n-1)) + O(n * m)      O(path length) + O(dp array)
class Solution {
public:
    int solve(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp) {
        if(i == 0 && j == 0 && grid[i][j] == 0) return 1;
        if(i < 0 || j < 0) return 0;
        if(i >= 0 && j >=0 && grid[i][j] == 1) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int up = solve(i-1, j, grid, dp);
        int left = solve(i, j-1, grid, dp);

        return dp[i][j] = up + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();

        vector<vector<int>> dp(n, vector<int>(m, -1));
        return solve(n-1, m-1, obstacleGrid, dp);    
    }
};





//              TABULATION
// TC: O(n * m)
// O(n * m)       O(dp array)
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();

        vector<vector<int>> dp(n, vector<int>(m, 0));

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(i == 0 && j == 0 && obstacleGrid[i][j] == 0) dp[i][j] = 1;
                else if(obstacleGrid[i][j] == 1) dp[i][j] = 0;
                else {
                    int up = 0;
                    if(i > 0) up = dp[i-1][j];

                    int left = 0;
                    if(j > 0) left = dp[i][j-1];

                    dp[i][j] = up + left;
                }
            }
        }

        return dp[n-1][m-1];    
    }
};





//              SPACE OPTIMISATION
// TC: O(n * m)
// O(m)       O(dp array)
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();

        vector<int> prev(m, 0);

        for(int i=0; i<n; i++) {
            vector<int> curr(m, 0);

            for(int j=0; j<m; j++) {
                if(i == 0 && j == 0 && obstacleGrid[i][j] == 0) curr[j] = 1;
                else if(obstacleGrid[i][j] == 1) curr[j] = 0;
                else {
                    int up = 0;
                    if(i > 0) up = prev[j];

                    int left = 0;
                    if(j > 0) left = curr[j-1];

                    curr[j] = up + left;
                }
            }

            prev = curr;
        }

        return prev[m-1];    
    }
};
