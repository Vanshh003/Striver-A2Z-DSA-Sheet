https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/




class Solution {
public:
    int lps(string s1) {
        int n = s1.size();

        string s2 = s1;
        reverse(s1.begin(), s1.end());

        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

        for(int i=0; i<=n; i++) dp[i][0] = 0;
        for(int j=0; j<=n; j++) dp[0][j] = 0;

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=n; j++) {
                if(s1[i-1] == s2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
            }
        }

        return dp[n][n];
    }

    int minInsertions(string s) {
        return s.size() - lps(s);
    }
};
