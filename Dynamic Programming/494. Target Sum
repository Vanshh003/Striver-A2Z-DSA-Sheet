https://leetcode.com/problems/target-sum/description/




//                  RECURSION
// TC: O(2^n)
// SC: O(n)

class Solution {
public:
    int solve(int n, int tar, vector<int> &nums) {
        if(n == 0) {
            if(tar == 0 && nums[0] == 0) return 2;
            if(tar == 0 || tar == nums[0]) return 1;
            return 0;
        }
        
        int notpick = solve(n-1, tar, nums);
        int pick = 0;
        if(nums[n] <= tar) pick = solve(n-1, tar-nums[n], nums);

        return pick + notpick;
    }

    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        if(target > sum || (sum - target) % 2 != 0) return 0;
        int tar = (sum - target) / 2;

        return solve(n-1, tar, nums);
    }
};





//                  MEMOIZATION
// TC: O(n * target)
// SC: O(n * target) + O(n)

class Solution {
public:
    int solve(int n, int tar, vector<int> &nums, vector<vector<int>> &dp) {
        if(n == 0) {
            if(tar == 0 && nums[0] == 0) return 2;
            if(tar == 0 || tar == nums[0]) return 1;
            return 0;
        }
        if(dp[n][tar] != -1) return dp[n][tar];

        int notpick = solve(n-1, tar, nums, dp);
        int pick = 0;
        if(nums[n] <= tar) pick = solve(n-1, tar-nums[n], nums, dp);

        return dp[n][tar] = pick + notpick;
    }

    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        if(target > sum || (sum - target) % 2 != 0) return 0;
        int tar = (sum - target) / 2;

        vector<vector<int>> dp(n, vector<int>(tar+1, -1));

        return solve(n-1, tar, nums, dp);
    }
};





//                  TABULATION
// TC: O(n * tar)
// SC: O(n * tar) 

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        if(sum - target < 0 || (sum - target) % 2 != 0) return 0;
        int tar = (sum - target) / 2;

        vector<vector<int>> dp(n, vector<int>(tar+1, 0));

        if(nums[0] == 0) dp[0][0] = 2;
        else dp[0][0] = 1;

        if(nums[0] != 0 && nums[0] <= tar) dp[0][nums[0]] = 1;

        for(int i=1; i<n; i++) {
            for(int j=0; j <= tar; j++) {
                int notpick = dp[i-1][j];
                int pick = 0;
                if(nums[i] <= j) pick = dp[i-1][j-nums[i]];

                dp[i][j] = pick + notpick;
            }
        }

        return dp[n-1][tar];
    }
};





//                  SPACE OPTIMISATION
// TC: O(n * tar)
// SC: O(tar) 

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        if(sum - target < 0 || (sum - target) % 2 != 0) return 0;
        int tar = (sum - target) / 2;

        vector<int> prev(tar+1, 0);
        vector<int> curr(tar+1, 0);

        if(nums[0] == 0) prev[0] = 2;
        else prev[0] = 1;

        if(nums[0] != 0 && nums[0] <= tar) prev[nums[0]] = 1;

        for(int i=1; i<n; i++) {
            for(int j=0; j <= tar; j++) {
                int notpick = prev[j];
                int pick = 0;
                if(nums[i] <= j) pick = prev[j-nums[i]];

                curr[j] = pick + notpick;
            }

            prev = curr;
        }

        return prev[tar];
    }
};
