https://leetcode.com/problems/triangle/description/




//              RECURSION
// TC: O(2 ^ (1 + 2 + 3 ... + n))
// SC: O(n)
class Solution {
public:
    int solve(int i, int j, int n, vector<vector<int>> &triangle) {
        if(i == n-1) return triangle[n-1][j];

        int down = triangle[i][j] + solve(i+1, j, n, triangle);
        int diagonal = triangle[i][j] + solve(i+1, j+1, n, triangle);

        return min(down, diagonal);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();

        return solve(0, 0, n, triangle);    
    }
};





//              MEMOIZATION
// TC: O(n * n)
// SC: O(n) + O(n * n)          O(stack space) + O(dp array)
class Solution {
public:
    int solve(int i, int j, int n, vector<vector<int>> &triangle, vector<vector<int>> &dp) {
        if(i == n-1) return triangle[n-1][j];
        if(dp[i][j] != -1) return dp[i][j];

        int down = triangle[i][j] + solve(i+1, j, n, triangle, dp);
        int diagonal = triangle[i][j] + solve(i+1, j+1, n, triangle, dp);

        return dp[i][j] = min(down, diagonal);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));

        return solve(0, 0, n, triangle, dp);    
    }
};





//              TABULATION
// TC: O(n * n)
// SC: O(n * n)           O(dp array)
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));

        for(int i=0; i<n; i++) dp[n-1][i] = triangle[n-1][i];

        for(int i=n-2; i>=0; i--) {
            for(int j=i; j>=0; j--) {
                int down = triangle[i][j] + dp[i+1][j];
                int diagonal = triangle[i][j] + dp[i+1][j+1];

                dp[i][j] = min(down, diagonal);
            }
        }    

        return dp[0][0];
    }
};





//              Space Optimisation
// TC: O(n * n)
// SC: O(n)           O(dp array)
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<int> front(n, 0);

        for(int i=0; i<n; i++) front[i] = triangle[n-1][i];

        for(int i=n-2; i>=0; i--) {
            vector<int> curr(n, 0);

            for(int j=i; j>=0; j--) {
                int down = triangle[i][j] + front[j];
                int diagonal = triangle[i][j] + front[j+1];

                curr[j] = min(down, diagonal);
            }

            front = curr;
        }    

        return front[0];
    }
};
