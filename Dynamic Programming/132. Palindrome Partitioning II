https://leetcode.com/problems/palindrome-partitioning-ii/description/




//                          RECURSION
// TC: exponential
// SC: O(n)

class Solution {
public:
    bool isPalin(string s) {
        int i = 0;
        int j = s.size()-1;
        while(i <= j) {
            if(s[i] != s[j]) return false;
            i++;
            j--;
        }

        return true;
    }

    int solve(int i, int n, string &s) {
        if(i == n) return 0;

        string temp = "";
        int minCost = INT_MAX;
        for(int ind = i; ind < n; ind++) {
            temp += s[ind];

            if(isPalin(temp)) {
                int cost = 1 + solve(ind+1, n, s);
                minCost = min(minCost, cost);
            }
        }

        return minCost;
    }

    int minCut(string s) {
        int n = s.size();
        return solve(0, n, s) - 1;
    }
};





//                          MEMOIZATION
// TC: o(n) * n
// SC: O(n) + O(n)

class Solution {
public:
    bool isPalin(string s) {
        int i = 0;
        int j = s.size()-1;
        while(i <= j) {
            if(s[i] != s[j]) return false;
            i++;
            j--;
        }

        return true;
    }

    int solve(int i, int n, string &s, vector<int> &dp) {
        if(i == n) return 0;
        if(dp[i] != -1) return dp[i];

        string temp = "";
        int minCost = INT_MAX;
        for(int ind = i; ind < n; ind++) {
            temp += s[ind];

            if(isPalin(temp)) {
                int cost = 1 + solve(ind+1, n, s, dp);
                minCost = min(minCost, cost);
            }
        }

        return dp[i] = minCost;
    }

    int minCut(string s) {
        int n = s.size();

        vector<int> dp(n, -1);
        return solve(0, n, s, dp) - 1;
    }
};





//                          TABULATION
// TC: o(n) * n
// SC: O(n)

class Solution {
public:
    bool isPalin(int i, int j, string &s) {  
        while(i <= j) {
            if(s[i] != s[j]) return false;
            
            i++;
            j--;
        }

        return true;
    }

    int minCut(string s) {
        int n = s.size();

        vector<int> dp(n+1, 0);
        
        for(int i = n-1; i >= 0; i--) {
            int minCost = INT_MAX;

            for(int ind = i; ind < n; ind++) {
                if(isPalin(i, ind, s)) {
                    int cost = 1 + dp[ind+1];
                    minCost = min(minCost, cost);
                }
            }

            dp[i] = minCost;
        }

        return dp[0]-1;
    }
};
