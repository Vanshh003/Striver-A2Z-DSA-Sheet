https://www.codingninjas.com/studio/problems/longest-bitonic-sequence_1062688?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




// TC: O(N^2) + O(N) + O(N^2) + O(N) + O(N)
// SC: O(N) + O(N)

int LIS(int n, vector<int> &arr, vector<int> &dp) {
	int maxi = 1;

	for(int i=1; i<n; i++) {
		for(int j=0; j<i; j++) {
			if(arr[i] > arr[j] && dp[i] < dp[j] + 1) dp[i] = dp[j] + 1;
			
			maxi = max(maxi, dp[i]);
		}
	}

	return maxi;
}

int longestBitonicSubsequence(vector<int>& arr, int n) {
	vector<int> dp1(n, 1);
	LIS(n, arr, dp1);

	vector<int> arr2 = arr;
	reverse(arr2.begin(), arr2.end());

	vector<int> dp2(n, 1);
	LIS(n, arr2, dp2);

	reverse(dp2.begin(), dp2.end());

	int maxi = 0;
	for(int i=0; i<n; i++) maxi = max(maxi, dp1[i] + dp2[i] - 1);
	
	return maxi;
}





// TC: O(N^2) + O(N^2) + O(N)
// SC: O(N) + O(N)

int longestBitonicSubsequence(vector<int>& arr, int n) {
	vector<int> dp1(n, 1);
	for(int i=0; i<n; i++) {
		for(int j=0; j<i; j++) {
			if(arr[i] > arr[j] && dp1[i] < dp1[j] + 1) dp1[i] = dp1[j] + 1;			
		}
	}

	vector<int> dp2(n, 1);
	for(int i=n-1; i>=0; i--) {
		for(int j=n-1; j>i; j--) {
			if(arr[i] > arr[j] && dp2[i] < dp2[j] + 1) dp2[i] = dp2[j] + 1;			
		}
	}

	int maxi = 0;
	for(int i=0; i<n; i++) maxi = max(maxi, dp1[i] + dp2[i] - 1);
	
	return maxi;
}
