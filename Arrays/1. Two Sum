https://leetcode.com/problems/two-sum/




//                      BRUTE
// TC: O(n^2)
// SC: O(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i=0; i<nums.size(); i++) {
            for(int j=i+1; j<nums.size(); j++) {
                if(nums[i] + nums[j] == target) return {i, j};
            }
        }

        return {-1, -1};
    }
};





// //                      BETTER
// // TC: O(nlogn)
// // SC: O(1)

// class Solution {
// public:
//     vector<int> twoSum(vector<int>& nums, int target) {
//         sort(nums.begin(), nums.end());
//         int n = nums.size();

//         int i = 0;
//         int j = n-1;

//         while(i < j) {
//             if(nums[i] + nums[j] == target) return 1;
//             else if(nums[i] + nums[j] < target) i++;
//             else j--;
//         }

//         return 0;
//     }
// };





//                      OPTIMAL
// TC: O(n)
// SC: O(n)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> map;
        
        for(int i=0; i<nums.size(); i++) {
            if(map.find(target-nums[i]) != map.end()) return {i, map[target-nums[i]]};
            else map[nums[i]] = i;
        }

        return {-1, -1};
    }
};
