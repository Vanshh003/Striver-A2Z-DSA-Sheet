https://leetcode.com/problems/longest-consecutive-sequence/description/




//                  BRUTE
// TC: O(n^2)
// SC: O(1)

class Solution {
public:
    bool linearsearch(vector<int>& nums, int n) {
        for(int i=0; i<nums.size(); i++) {
            if(nums[i] == n) return true;
        }

        return false;
    }

    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();
        int maxi = 1;

        if(n==0) return 0;

        for(int i=0; i<n; i++) {
            int count = 1;
            int ele = nums[i];
        
            while(linearsearch(nums, ele+1) == true) {
                ele++;
                count++;
            }

            maxi = max(maxi, count);
        }

        return maxi;
    }
};





//                  BETTER
// TC: O(nlogn)
// SC: O(1)

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();
        if(n==0) return 0;

        sort(nums.begin(), nums.end());
        int count = 1;
        int lastsmaller = INT_MIN;
        int maxi = 1;

        for(int i=0; i<n; i++) {
            if(nums[i]-1 == lastsmaller) {
                count++;
                lastsmaller = nums[i];
            }
            else if(nums[i] != lastsmaller) {
                count = 1;
                lastsmaller = nums[i];
            }

            maxi = max(maxi, count);
        }

        return maxi;
    }
};





//                  OPTIMAL
// TC: O(n + 2*n)
// SC: O(n)

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();
        unordered_set<int> set;
        int maxi = 0;
        
        for(int i=0; i<n; i++) set.insert(nums[i]);
        
        for(auto i: set) {
            if(set.find(i-1) == set.end()) {
                int count = 1;
                int ele = i;

                while(set.find(ele+1) != set.end()) {
                    ele++;
                    count++;
                }

                maxi = max(maxi, count);
            }
        }

        return maxi;
    }
};
