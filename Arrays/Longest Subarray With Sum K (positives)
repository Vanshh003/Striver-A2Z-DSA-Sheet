https://www.codingninjas.com/studio/problems/longest-subarray-with-sum-k_6682399?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM




//                      BRUTE
// TC: O(n^3)
// SC: O(1)

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int n = a.size();
    int count = 0;

    for(int i=0; i<n; i++) {
        for(int j=i; j<n; j++) {
            long long sum = 0;

            for(int k=i; k<=j; k++) {
                sum += a[k];
            }
                
            if(sum == k) count = max(count, j-i+1);
        }

    }

    return count;
}




//                      BRUTE
// TC: O(n^2)
// SC: O(1)

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int n = a.size();
    int count = 0;

    for(int i=0; i<n; i++) {
        long long sum = 0;
       
        for(int j=i; j<n; j++) {
            sum += a[j];                
            
            if(sum == k) count = max(count, j-i+1);
        }

    }

    return count;
}





//                      OPTIMAL
// TC: O(2*N)
// SC: O(1)

#include <bits/stdc++.h>

int longestSubarrayWithSumK(vector<int> a, long long k) {
    long long len = 0;
    long long right = 0;
    long long left = 0;
    long long sum = a[0];

    int n = a.size();

    while(right < n) {
        while(left <= right && sum > k) {
            sum -= a[left];
            left++;
        }

        if(sum == k) len = max(len, right-left+1);
        right++;

        if(right < n) sum += a[right];
    }

    return len;
}
