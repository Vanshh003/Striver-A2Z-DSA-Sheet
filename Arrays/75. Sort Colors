https://leetcode.com/problems/sort-colors/description/




//                      BRUTE
// TC: O(NlogN)
// SC: O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(), nums.end());
    }
};





//                      BETTER
// TC: O(N)
// SC: O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int cnt0 = 0;
        int cnt1 = 0;
        int cnt2 = 0;

        for(int i: nums) {
            if(i == 0) cnt0++;
            else if(i == 1) cnt1++;
            else if(i == 2) cnt2++;
        }

        for(int i = 0; i < cnt0; i++) nums[i] = 0;
        for(int i = cnt0; i < cnt0 + cnt1; i++) nums[i] = 1;
        for(int i = cnt0 + cnt1; i < nums.size(); i++) nums[i] = 2;
    }
};





//                      OPTIMAL
// TC: O(N)
// SC: O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int low = 0;
        int mid = 0;
        int high = n-1;

        while(mid <= high) {
            if(nums[mid] == 0) {
                swap(nums[low], nums[mid]);
                low++;
                mid++;
            }

            else if(nums[mid] == 1) mid++;

            else if(nums[mid] == 2) {
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};
