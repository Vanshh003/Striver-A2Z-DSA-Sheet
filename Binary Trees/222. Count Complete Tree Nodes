https://leetcode.com/problems/count-complete-tree-nodes/description/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// TC: O((logN)^2) (the height at any instant will not be more than logN)
// SC: O(logN) (in the worst case we might end up traversing height of the tree)

class Solution {
public:
    int findleftheight(TreeNode* node) {
        int height = 0;

        while(node) {
            height++;
            node = node->left;
        }

        return height;
    }

    int findrightheight(TreeNode* node) {
        int height = 0;

        while(node) {
            height++;
            node = node->right;
        }

        return height;
    }

    int countNodes(TreeNode* root) {
        if(root == NULL) return 0;

        int leftheight = findleftheight(root);
        int rightheight = findrightheight(root);

        // if(leftheight == rightheight) return (1 << leftheight) - 1;
        if(leftheight == rightheight) return (pow(2, leftheight)) - 1;

        return 1 + countNodes(root->left) + countNodes(root->right);  
    }
};
