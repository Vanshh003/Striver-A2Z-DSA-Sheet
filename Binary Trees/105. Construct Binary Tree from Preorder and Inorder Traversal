https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// TC: O(N)
// SC: O(N)

class Solution {
public:

    TreeNode* solve(vector<int> &preorder, int preStart, int preEnd, vector<int> &inorder, int inStart, int inEnd, map<int, int> inMap) {
        if(preStart > preEnd || inStart > inEnd) return NULL;

        TreeNode* root = new TreeNode(preorder[preStart]);

        int inRoot = inMap[root->val];
        int numsLeft = inRoot - inStart;

        root->left = solve(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, inRoot - 1, inMap);
        root->right = solve(preorder, preStart + numsLeft + 1, preEnd, inorder, inRoot + 1, inEnd, inMap);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preStart = 0;
        int preEnd = preorder.size() - 1;
        int inStart = 0;
        int inEnd = inorder.size() - 1;

        map<int, int> inMap;

        for(int i=0; i < inorder.size(); i++) inMap[inorder[i]] = i;
        
        return solve(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, inMap);

        // return root;
    }
};








// class Solution {
// public:
// TreeNode* constructTree(vector < int > & preorder, int preStart, int preEnd, vector 
//  < int > & inorder, int inStart, int inEnd, map < int, int > & mp) {
//   if (preStart > preEnd || inStart > inEnd) return NULL;

//   TreeNode* root = new TreeNode(preorder[preStart]);
//   int elem = mp[root -> val];
//   int nElem = elem - inStart;

//   root -> left = constructTree(preorder, preStart + 1, preStart + nElem, inorder,
//   inStart, elem - 1, mp);
//   root -> right = constructTree(preorder, preStart + nElem + 1, preEnd, inorder, 
//   elem + 1, inEnd, mp);

//   return root;
// }

// TreeNode* buildTree(vector < int > & preorder, vector < int > & inorder) {
//   int preStart = 0, preEnd = preorder.size() - 1;
//   int inStart = 0, inEnd = inorder.size() - 1;

//   map < int, int > mp;
//   for (int i = inStart; i <= inEnd; i++) {
//     mp[inorder[i]] = i;
//   }

//   return constructTree(preorder, preStart, preEnd, inorder, inStart, inEnd, mp);
// }
// };
