https://leetcode.com/problems/binary-tree-inorder-traversal/description/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// MORRIS TRAVERSAL uses the concept of Threaded Binary Tree and does traversal in slightly less than or approximately O(N) time without taking any extra space i.e., SC: O(1)

// CASE 1: if cur->left == NULL then print the current node's value and move cur to cur->right.

// CASE 2: if cur->left != NULL the go to the left subtree and figure out the last node of the left subtree in the inorder traversal i.e., the rightmost node in the left subtree and then make a thread or a link from that rightmost node to cur and move cur to cur->left and if the thread already exists that would mean that the node or left subtree has already been visited therefore we cut the thread and push cur to inorder and move cur to cur->right.

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> inorder;
        TreeNode* cur = root;

        while(cur != NULL) {
            if(cur->left == NULL) {
                inorder.push_back(cur->val);
                cur = cur->right;
            }
            else {
                TreeNode* prev = cur->left;
                while(prev->right && prev->right != cur) prev = prev->right;

                if(prev->right == NULL) {
                    prev->right = cur;
                    cur = cur->left;
                }
                else {
                    prev->right = NULL;
                    inorder.push_back(cur->val);
                    cur = cur->right;
                }
            }
        }

        return inorder;
    }
};
