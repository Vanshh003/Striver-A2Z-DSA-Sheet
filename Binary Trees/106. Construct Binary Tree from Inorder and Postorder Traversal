https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// TC: O(N)* (logN)(for hashmap)
// SC: O(N)+O(N) (hashmap+aux stack space)

class Solution {
public:
    TreeNode* solve(vector<int> &inorder, int inStart, int inEnd, vector<int> &postorder, int postStart, int postEnd, map<int, int> &map) {
        if(postStart > postEnd || inStart > inEnd) return NULL;

        TreeNode* root = new TreeNode(postorder[postEnd]);

        int inRoot = map[postorder[postEnd]];
        int numsLeft = inRoot - inStart;

        root->left = solve(inorder, inStart, inRoot - 1, postorder, postStart, postStart + numsLeft - 1, map);
        root->right = solve(inorder, inRoot + 1, inEnd, postorder, postStart + numsLeft, postEnd - 1, map);

        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() != postorder.size()) return NULL;

        map<int, int> map;

        for(int i=0; i < inorder.size(); i++) map[inorder[i]] = i;
        
        return solve(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, map);
    }
};
