https://www.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/0




class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<int> ans(n+1, 1e9);
        
        vector<pair<int, int>> adj[n+1];
        for(auto &it: edges) {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        vector<int> parent(n+1);
        for(int i=1; i<=n; i++) parent[i] = i;
        
        ans[1] = 0;
        pq.push({0, 1});
        
        while(!pq.empty()) {
            auto front = pq.top();
            int dist = front.first;
            int node = front.second;
            
            pq.pop();
            
            for(auto &it: adj[node]) {
                int goto_node = it.first;
                int distance = it.second;
                
                int d = dist + distance;
                
                if(d < ans[goto_node]) {
                    ans[goto_node] = d;
                    pq.push({d, goto_node});
                    parent[goto_node] = node;
                }
            }
        }
        
        if(ans[n] == 1e9) return {-1};
        
        vector<int> path;
        int node = n;
        
        while(parent[node] != node) {
            path.push_back(node);
            node = parent[node];
        }
        
        path.push_back(1);
        path.push_back(ans[n]);
        reverse(path.begin(), path.end());
        
        return path;
    }
};
