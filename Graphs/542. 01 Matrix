https://leetcode.com/problems/01-matrix/description/




class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();

        vector<vector<int>> visited(n, vector<int>(m, 0));
        vector<vector<int>> dist(n, vector<int>(m, 0));
        queue<pair<pair<int, int>, int>> q;     // {{x, y}, dist}

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(mat[i][j] == 0) {
                    q.push({{i, j}, 0});
                    visited[i][j] = 1;
                }
            }
        }

        while(!q.empty()) {
            auto node = q.front();
            q.pop();

            int row = node.first.first;
            int col = node.first.second;
            int dis = node.second;

            dist[row][col] = dis;

            int delRow[4] = {0, 1, 0, -1};
            int delCol[4] = {1, 0, -1, 0};

            for(int i=0; i<4; i++) {
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if(nRow >= 0 && nCol >= 0 && nRow < n && nCol < m && visited[nRow][nCol] == 0) {
                    q.push({{nRow, nCol}, dis+1});
                    visited[nRow][nCol] = 1;
                }
            }
        }

        return dist;
    }
};
