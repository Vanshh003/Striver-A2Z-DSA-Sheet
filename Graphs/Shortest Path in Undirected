https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph-having-unit-distance/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=shortest-path-in-undirected-graph-having-unit-distance




class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>> &edges, int n, int m, int src){
        vector<int> adj[n];
        vector<int> visited(n, 0);
        
        for(int i=0; i<m; i++) {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<int> ans(n, 1e9);
        ans[src] = 0;
        
        queue<pair<int, int>> q;
        q.push({src, 0});
        visited[src] = 1;
        
        while(!q.empty()) {
            int node = q.front().first;
            int dist = q.front().second;
            
            q.pop();
            
            for(auto &i: adj[node]) {
                if(!visited[i]) {
                    ans[i] = dist+1;
                    q.push({i, ans[i]});
                    visited[i] = 1;
                }
            }
        }
        
        for(int i=0; i<n; i++) {
            if(ans[i] == 1e9) ans[i] = -1;
        }
        
        return ans;
    }
};
