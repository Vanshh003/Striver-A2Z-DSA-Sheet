https://leetcode.com/problems/surrounded-regions/description/




class Solution {
public:
    void dfs(int row, int col, vector<vector<int>> &visited, vector<vector<char>> &board) {
        int n = board.size();
        int m = board[0].size();

        visited[row][col] = 1;
        int delRow[] = {-1 ,0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        for(int i=0; i<4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];

            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && !visited[nRow][nCol] && board[nRow][nCol] == 'O') {
                dfs(nRow, nCol, visited, board);
            }
        }
    }

    void solve(vector<vector<char>> &board) {
        int n = board.size();
        int m = board[0].size();

        vector<vector<int>> visited(n, vector<int>(m, 0));

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(j == 0 || j == m-1) {
                    if(board[i][j] == 'O' && !visited[i][j]) dfs(i, j, visited, board);
                }

                if(i == 0 || i == n-1) {
                    if(board[i][j] == 'O' && !visited[i][j]) dfs(i, j, visited, board);
                }

                if(board[i][j] == 'X') visited[i][j] = 1;
            }
        }

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(visited[i][j] == 0) board[i][j] = 'X';
            }
        }
    }
};
