https://leetcode.com/problems/rotting-oranges/description/




class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        queue<pair< pair<int, int>, int>> q;        // {{row, col}, time}
        vector<vector<int>> visited(n, vector<int>(m, 0));

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == 2) {
                    q.push({{i, j}, 0});
                    visited[i][j] = 2;
                }
            }
        }

        int delRow[] = {0, -1, 0, 1};
        int delCol[] = {-1, 0, 1, 0};
        int time = 0;

        while(!q.empty()) {
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;
            
            time = max(time, t);
            q.pop();

            for(int i=0; i<4; i++) {
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && grid[nRow][nCol] == 1 && visited[nRow][nCol] != 2) {
                    q.push({{nRow, nCol}, t+1});
                    visited[nRow][nCol] = 2;
                }
            }
        }

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(visited[i][j] != 2 && grid[i][j] == 1) return -1;
            }
        }

        return time;
    }
};
