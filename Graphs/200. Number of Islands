https://leetcode.com/problems/number-of-islands/description/




// TC: O(n*m) + O(n*m)*9
// SC: O(n*m) + O(n*m)

class Solution {
public: 
    void bfs(int i, int j, vector<vector<int>> &visited, vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        visited[i][j] = 1;
        queue<pair<int, int>> q;
        q.push({i, j});

        while(!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

                    // for checking neighbours in all 8 directions
            // for(int delrow = -1; delrow <= 1; delrow++) {
            //     for(int delcol = -1; delcol <= 1; delcol++) {
            //         int nbrrow = row + delrow;
            //         int nbrcol = col + delcol;

                    // if(nbrrow >= 0 && nbrrow < n && nbrcol >= 0 && nbrcol < m && grid[nbrrow][nbrcol] == '1' && !visited[nbrrow][nbrcol]) {
                    //     visited[nbrrow][nbrcol] = 1;
                    //     q.push({nbrrow, nbrcol});
                    // }
            //     }
            // }

            int uprow = row-1;
            int upcol = col;
            if(uprow >= 0 && uprow < n && upcol >= 0 && upcol < m && grid[uprow][upcol] == '1' && !visited[uprow][upcol]) {
                visited[uprow][upcol] = 1;
                q.push({uprow, upcol});
            }

            int downrow = row+1;
            int downcol = col;
            if(downrow >= 0 && downrow < n && downcol >= 0 && downcol < m && grid[downrow][downcol] == '1' && !visited[downrow][downcol]) {
                visited[downrow][downcol] = 1;
                q.push({downrow, downcol});
            }

            int leftrow = row;
            int leftcol = col-1;
            if(leftrow >= 0 && leftrow < n && leftcol >= 0 && leftcol < m && grid[leftrow][leftcol] == '1' && !visited[leftrow][leftcol]) {
                visited[leftrow][leftcol] = 1;
                q.push({leftrow, leftcol});
            }

            int rightrow = row;
            int rightcol = col+1;
            if(rightrow >= 0 && rightrow < n && rightcol >= 0 && rightcol < m && grid[rightrow][rightcol] == '1' && !visited[rightrow][rightcol]) {
                visited[rightrow][rightcol] = 1;
                q.push({rightrow, rightcol});
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m, 0));

        int count = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == '1' && !visited[i][j]) {
                    count++;
                    bfs(i, j, visited, grid);
                }
            }
        }

        return count;
    }
};
