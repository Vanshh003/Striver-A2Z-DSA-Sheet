https://leetcode.com/problems/number-of-enclaves/




class Solution {
public:
    void dfs(int row, int col, vector<vector<int>> &visited, vector<vector<int>> &grid) {
        int n = grid.size();
        int m = grid[0].size();

        visited[row][col] = 1;
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        for(int i=0; i<4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];
            
            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && !visited[nRow][nCol] && grid[nRow][nCol] == 1) {
                dfs(nRow, nCol, visited, grid);
            }
        }
    }
    
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> visited(n, vector<int>(m, 0));
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(i == 0 || i == n-1) {
                    if(grid[i][j] == 1 && !visited[i][j]) dfs(i, j, visited, grid);
                }
                if(j == 0 || j == m-1) {
                    if(grid[i][j] == 1 && !visited[i][j]) dfs(i, j, visited, grid);
                }
                if(grid[i][j] == 0) visited[i][j] = 1;
            }
        }

        int count = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(visited[i][j] == 0) count++;
            }
        }

        return count;
    }
};
